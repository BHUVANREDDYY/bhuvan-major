#linear regression

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn import metrics

df = pd.read_csv('/content/gujarat-onion.csv',encoding='latin1')
df.shape
df.describe()
df.isnull().sum()
df=df.dropna()

df['datetime'] = pd.to_datetime(df['datetime'])
reference_date = pd.to_datetime('2020-01-01')
df['days_since_reference'] = (df['datetime'] - reference_date).dt.days

#X = df[['days_since_reference','min_price', 'max_price', 'tempmax', 'tempmin', 'temp', 'dew', 'humidity', 'precip', 'precipprob', 'precipcover']]
#X=df[['tempmax','tempmin','temp','dew','humidity','precip','precipprob','precipcover']]
X=df[['min_price','max_price','tempmax','tempmin','temp','dew','humidity','precip','precipprob','precipcover']]
#X = df[['days_since_reference', 'tempmax', 'tempmin', 'temp', 'dew', 'humidity', 'precip', 'precipprob', 'precipcover']]
y=df['modal_price']

train_X, test_X, train_y, test_y = train_test_split(X, y, test_size=0.5, random_state=0)

scaler = StandardScaler()
train_X_scaled = scaler.fit_transform(train_X)
test_X_scaled = scaler.transform(test_X)

linreg = LinearRegression()
linreg.fit(train_X_scaled, train_y)
print("Model Trained")
predicted_y = linreg.predict(test_X_scaled)
predicted_y

compare = pd.DataFrame({'Actual price': test_y, 'Predicted price': predicted_y})
print(compare)
#compare.plot(kind='line', figsize=(7, 7), color=['#1a4301', '#ff9f1c'])
a=compare['Actual price']
p=compare['Predicted price']

aa=a.head(10)
pp=p.head(10)

plt.plot(aa,label='Actual price')
plt.plot(pp,label='Predicted price')
plt.legend(bbox_to_anchor=(1.70, 1.02), ncol=2)
plt.show()
print("Mean Absolute Error: ",metrics.mean_absolute_error(test_y, predicted_y))
print("R2 score =", round(metrics.r2_score(test_y, predicted_y),2))
errors = abs( predicted_y - test_y)
print('Mean Absolute Error:', round(np.mean(errors), 2), 'degrees.')
mape = 100 * (errors / test_y)
accuracy = 100 - np.mean(mape)
print('Accuracy:', round(accuracy, 2), '%.')

#Decision tree

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeRegressor,plot_tree
from sklearn.metrics import mean_squared_error, r2_score

df = pd.read_csv('/content/gujarat-onion.csv', encoding='latin1')
df = df.dropna()

df['datetime'] = pd.to_datetime(df['datetime'])
reference_date = pd.to_datetime('2020-01-01')
df['days_since_reference'] = (df['datetime'] - reference_date).dt.days

#X = df[['days_since_reference','min_price', 'max_price', 'tempmax', 'tempmin', 'temp', 'dew', 'humidity', 'precip', 'precipprob', 'precipcover']]
X = df[['min_price', 'max_price', 'tempmax', 'tempmin', 'temp', 'dew', 'humidity', 'precip', 'precipprob', 'precipcover']]
#X=df[['tempmax','tempmin','temp','dew','humidity','precip','precipprob','precipcover']]
#X = df[['days_since_reference', 'tempmax', 'tempmin', 'temp', 'dew', 'humidity', 'precip', 'precipprob', 'precipcover']]
y = df['modal_price']

train_X, test_X, train_y, test_y = train_test_split(X, y, test_size=0.5, random_state=0)

scaler = StandardScaler()
train_X_scaled = scaler.fit_transform(train_X)
test_X_scaled = scaler.transform(test_X)

decision_tree = DecisionTreeRegressor(random_state=0)
decision_tree.fit(train_X_scaled, train_y)
print("Model Trained")
predicted_y = decision_tree.predict(test_X_scaled)
predicted_y

plt.figure(figsize=(12, 6))
plot_tree(decision_tree, feature_names=X.columns, filled=True, rounded=True)
plt.show()

compare = pd.DataFrame({'Actual price': test_y, 'Predicted price': predicted_y})
print(compare)
#compare.plot(kind='line', figsize=(7, 7), color=['#1a4301', '#ff9f1c'])

a=compare['Actual price']
p=compare['Predicted price']

aa=a.head(10)
pp=p.head(10)

plt.plot(aa,label='Actual price')
plt.plot(pp,label='Predicted price')
plt.legend(bbox_to_anchor=(1.70, 1.02), ncol=2)
plt.show()
print("Mean Absolute Error: ",metrics.mean_absolute_error(test_y, predicted_y))
print("R2 score =", round(metrics.r2_score(test_y, predicted_y),2))
errors = abs( predicted_y - test_y)
print('Mean Absolute Error:', round(np.mean(errors), 2), 'degrees.')
mape = 100 * (errors / test_y)
accuracy = 100 - np.mean(mape)
print('Accuracy:', round(accuracy, 2), '%.')

#RandomForest

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn import metrics
from sklearn.tree import plot_tree

df = pd.read_csv('/content/gujarat-onion.csv', encoding='latin1')
df=df.dropna()

df['datetime'] = pd.to_datetime(df['datetime'])
reference_date = pd.to_datetime('2020-01-01')
df['days_since_reference'] = (df['datetime'] - reference_date).dt.days

X = df[['min_price', 'max_price', 'tempmax', 'tempmin', 'temp', 'dew', 'humidity', 'precip', 'precipprob', 'precipcover']]
#X=df[['tempmax','tempmin','temp','dew','humidity','precip','precipprob','precipcover']]
#X = df[['days_since_reference', 'tempmax', 'tempmin', 'temp', 'dew', 'humidity', 'precip', 'precipprob', 'precipcover']]
y = df['modal_price']

train_X, test_X, train_y, test_y = train_test_split(X, y, test_size=0.5, random_state=0)

scaler = StandardScaler()
train_X_scaled = scaler.fit_transform(train_X)
test_X_scaled = scaler.transform(test_X)

random_forest = RandomForestRegressor(random_state=0)
random_forest.fit(train_X_scaled, train_y)
print("Model Trained")
predicted_y = random_forest.predict(test_X_scaled)

max_trees_to_visualize = 5
for tree_idx in range(min(random_forest.n_estimators, max_trees_to_visualize)):
    plt.figure(figsize=(12, 6))
    plot_tree(random_forest.estimators_[tree_idx], feature_names=X.columns, filled=True, rounded=True)
    plt.title(f"Decision Tree {tree_idx+1}")
    plt.show()

compare = pd.DataFrame({'Actual price': test_y, 'Predicted price': predicted_y})
print(compare)
#compare.plot(kind='line', figsize=(7, 7), color=['#1a4301', '#ff9f1c'])
a=compare['Actual price']
p=compare['Predicted price']

aa=a.head(10)
pp=p.head(10)

plt.plot(aa,label='Actual price')
plt.plot(pp,label='Predicted price')
plt.legend(bbox_to_anchor=(1.70, 1.02), ncol=2)
plt.show()
print("Mean Absolute Error: ", metrics.mean_absolute_error(test_y, predicted_y))
print("R2 score =", round(metrics.r2_score(test_y, predicted_y), 2))
errors = abs(predicted_y - test_y)
print('Mean Absolute Error:', round(np.mean(errors), 2), 'degrees.')
mape = 100 * (errors / test_y)
accuracy = 100 - np.mean(mape)
print('Accuracy:', round(accuracy, 2), '%.')

#XGBbooster

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from xgboost import XGBRegressor,plot_tree
from sklearn import metrics

df = pd.read_csv('/content/gujarat-onion.csv', encoding='latin1')
df = df.dropna()

df['datetime'] = pd.to_datetime(df['datetime'])
reference_date = pd.to_datetime('2020-01-01')
df['date'] = (df['datetime'] - reference_date).dt.days

X = df[['date','min_price', 'max_price', 'tempmax', 'tempmin', 'temp', 'dew', 'humidity', 'precip', 'precipprob', 'precipcover']]
#X = df[['min_price', 'max_price', 'tempmax', 'tempmin', 'temp', 'dew', 'humidity', 'precip', 'precipprob', 'precipcover']]
#X=df[['tempmax','tempmin','temp','dew','humidity','precip','precipprob','precipcover']]
#X = df[['days_since_reference', 'tempmax', 'tempmin', 'temp', 'dew', 'humidity', 'precip', 'precipprob', 'precipcover']]
y = df['modal_price']

train_X, test_X, train_y, test_y = train_test_split(X, y, test_size=0.5, random_state=0)

scaler = StandardScaler()
train_X_scaled = scaler.fit_transform(train_X)
test_X_scaled = scaler.transform(test_X)

xgb_model = XGBRegressor(random_state=0)
xgb_model.fit(train_X_scaled, train_y)
predicted_y = xgb_model.predict(test_X_scaled)

plot_tree(xgb_model, num_trees=0)
plt.show()

compare = pd.DataFrame({'Actual price': test_y, 'Predicted price': predicted_y})
print(compare)
#compare.plot(kind='line', figsize=(7, 7), color=['#1a4301', '#ff9f1c'])
a=compare['Actual price']
p=compare['Predicted price']

aa=a.head(10)
pp=p.head(10)

plt.plot(aa,label='Actual price')
plt.plot(pp,label='Predicted price')
plt.legend(bbox_to_anchor=(1.70, 1.02), ncol=2)
plt.show()
print("Mean Absolute Error: ", metrics.mean_absolute_error(test_y, predicted_y))
print("R2 score =", round(metrics.r2_score(test_y, predicted_y), 2))
errors = abs(predicted_y - test_y)
print('Mean Absolute Error:', round(np.mean(errors), 2), 'degrees.')
mape = 100 * (errors / test_y)
accuracy = 100 - np.mean(mape)
print('Accuracy:', round(accuracy, 2), '%.')


#Bayesian Regression

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import BayesianRidge
from sklearn.metrics import mean_absolute_error, r2_score

df = pd.read_csv('/content/gujarat-onion.csv', encoding='latin1')
df = df.dropna()

df['datetime'] = pd.to_datetime(df['datetime'])
reference_date = pd.to_datetime('2020-01-01')
df['days_since_reference'] = (df['datetime'] - reference_date).dt.days

X = df[['min_price', 'max_price', 'tempmax', 'tempmin', 'temp', 'dew', 'humidity', 'precip', 'precipprob', 'precipcover']]
#X=df[['tempmax','tempmin','temp','dew','humidity','precip','precipprob','precipcover']]
#X = df[['days_since_reference', 'tempmax', 'tempmin', 'temp', 'dew', 'humidity', 'precip', 'precipprob', 'precipcover']]
y = df['modal_price']

train_X, test_X, train_y, test_y = train_test_split(X, y, test_size=0.5, random_state=0)

scaler = StandardScaler()
train_X_scaled = scaler.fit_transform(train_X)
test_X_scaled = scaler.transform(test_X)

bayesian_reg = BayesianRidge()
bayesian_reg.fit(train_X_scaled, train_y)
predicted_y = bayesian_reg.predict(test_X_scaled)

compare = pd.DataFrame({'Actual price': test_y, 'Predicted price': predicted_y})
print(compare)
#compare.plot(kind='line', figsize=(7, 7), color=['#1a4301', '#ff9f1c'])
a=compare['Actual price']
p=compare['Predicted price']

aa=a.head(10)
pp=p.head(10)

plt.plot(aa,label='Actual price')
plt.plot(pp,label='Predicted price')
plt.legend(bbox_to_anchor=(1.70, 1.02), ncol=2)
plt.show()
print("Mean Absolute Error: ", metrics.mean_absolute_error(test_y, predicted_y))
print("R2 score =", round(metrics.r2_score(test_y, predicted_y), 2))
errors = abs(predicted_y - test_y)
print('Mean Absolute Error:', round(np.mean(errors), 2), 'degrees.')
mape = 100 * (errors / test_y)
accuracy = 100 - np.mean(mape)
print('Accuracy:', round(accuracy, 2), '%.')

#KNN

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sn
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.neighbors import KNeighborsRegressor
from sklearn.metrics import mean_absolute_error

df = pd.read_csv('/content/gujarat-onion.csv', encoding='latin1')
df = df.dropna()

df['datetime'] = pd.to_datetime(df['datetime'])
reference_date = pd.to_datetime('2020-01-01')
df['days_since_reference'] = (df['datetime'] - reference_date).dt.days

X = df[['min_price', 'max_price', 'tempmax', 'tempmin', 'temp', 'dew', 'humidity', 'precip', 'precipprob', 'precipcover']]
#X=df[['tempmax','tempmin','temp','dew','humidity','precip','precipprob','precipcover']]
#X = df[['days_since_reference', 'tempmax', 'tempmin', 'temp', 'dew', 'humidity', 'precip', 'precipprob', 'precipcover']]
y = df['modal_price']

train_X, test_X, train_y, test_y = train_test_split(X, y, test_size=0.5, random_state=0)

scaler = StandardScaler()
train_X_scaled = scaler.fit_transform(train_X)
test_X_scaled = scaler.transform(test_X)

knn_reg = KNeighborsRegressor(n_neighbors=3)
knn_reg.fit(train_X, train_y)
predicted_y = knn_reg.predict(test_X)

compare = pd.DataFrame({'Actual price': test_y, 'Predicted price': predicted_y})
print(compare)
#compare.plot(kind='line', figsize=(7, 7), color=['#1a4301', '#ff9f1c'])
a=compare['Actual price']
p=compare['Predicted price']

aa=a.head(10)
pp=p.head(10)

plt.plot(aa,label='Actual price')
plt.plot(pp,label='Predicted price')
plt.legend(bbox_to_anchor=(1.70, 1.02), ncol=2)
plt.show()

#sn.heatmap(X,y,annot=True)
#plt.show()
print("Mean Absolute Error: ", metrics.mean_absolute_error(test_y, predicted_y))
print("R2 score =", round(metrics.r2_score(test_y, predicted_y), 2))
errors = abs(predicted_y - test_y)
print('Mean Absolute Error:', round(np.mean(errors), 2), 'degrees.')
mape = 100 * (errors / test_y)
accuracy = 100 - np.mean(mape)
print('Accuracy:', round(accuracy, 2), '%.')
